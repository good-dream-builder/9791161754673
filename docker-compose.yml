version: '2.1'

services:
  product:
    build: microservices/product-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy


  recommendation:
    build: microservices/recommendation-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    build: microservices/review-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    build: microservices/product-composite-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      rabbitmq:
        condition: service_healthy

  # 검색 서버
  eureka:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: cloud/eureka
    mem_limit: 350m
  
  # 에지 서버
  gateway:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: cloud/gateway
    mem_limit: 350m
    ports: # https
      - "8443:8443"
  
  # 인증 서버
#  auth:
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
#    build: cloud/auth
#    mem_limit: 350m

  # 설정 서버(파일 기반의 구성 저장소)
  config:
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
#      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY} # 대칭 암호화 키
#      # HTTP 기본 인증
#      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
#      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
#    volumes: # /config-repo에 접근하면 config-repo 폴더에 접근
#      - $PWD/config-repo:/config-repo
    build: cloud/config
    mem_limit: 350m

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 350m
    ports:
      - "27018:27017"
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 20s
      timeout: 5s
      retries: 10

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    mem_limit: 350m
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.7.8-management
    mem_limit: 350m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 20s
      timeout: 5s
      retries: 10